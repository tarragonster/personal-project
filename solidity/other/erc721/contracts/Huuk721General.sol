// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract Huuk721General is
Initializable,
ContextUpgradeable,
AccessControlEnumerableUpgradeable,
ERC721EnumerableUpgradeable,
ERC721PausableUpgradeable,
UUPSUpgradeable
{
    using AddressUpgradeable for address;
    using StringsUpgradeable for uint256;
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    CountersUpgradeable.Counter private _tokenIdTracker;
    string private _baseTokenURI;
    mapping(uint256 => string) private _tokenURIs;

    mapping(uint256 => address) public creators;
    mapping(uint256 => uint256) public RoyaltyFee;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function initialize(
        string memory _name,
        string memory _symbol,
        string memory _baseTokenURI_
    ) public initializer {
        __Huuk721General_init(_name, _symbol, _baseTokenURI_);
    }

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function __Huuk721General_init(
        string memory _name,
        string memory _symbol,
        string memory _baseTokenURI_
    ) internal initializer {
        __ERC721_init_unchained(_name, _symbol);
        __Pausable_init_unchained();
        __Huuk721General_init_unchained(_baseTokenURI_);
    }

    function __Huuk721General_init_unchained(string memory _baseTokenURI_)
    internal
    initializer
    {
        _baseTokenURI = _baseTokenURI_;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    modifier adminGuard() {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "Huuk721General: must have admin role"
        );
        _;
    }

    modifier pauserGuard() {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "Huuk721General: must have pauser role"
        );
        _;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function getCurrentTokenId() public view returns (uint256) {
        return _tokenIdTracker.current();
    }

    function getCreator(uint256 _id) public view returns (address) {
        return creators[_id];
    }

    function getRoyaltyFee(uint256 _id) public view returns (uint256) {
        return RoyaltyFee[_id];
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 _tokenId)
    public
    view
    virtual
    override
    returns (string memory)
    {
        require(_exists(_tokenId), "Huuk721General: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return
        bytes(baseURI).length > 0
        ? string(abi.encodePacked(baseURI, _tokenURIs[_tokenId]))
        : "";
    }

    function setBaseURI(string memory _uri) external adminGuard {
        _baseTokenURI = _uri;
    }

    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) private {
        require(_exists(_tokenId), "ERC721: URI set of nonexistent token");
        _tokenURIs[_tokenId] = _tokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function create(string calldata _tokenURI, uint256 _royaltyFee) external {
        uint256 tokenId = _tokenIdTracker.current();
        _mint(_msgSender(), tokenId);
        creators[tokenId] = _msgSender();
        RoyaltyFee[tokenId] = _royaltyFee;
        _setTokenURI(tokenId, _tokenURI);
        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual pauserGuard {
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual pauserGuard {
        _unpause();
    }

    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _tokenId
    )
    internal
    virtual
    override(
    ERC721EnumerableUpgradeable,
    ERC721PausableUpgradeable
    )
    {
        super._beforeTokenTransfer(_from, _to, _tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 _interfaceId)
    public
    view
    virtual
    override(
    AccessControlEnumerableUpgradeable,
    ERC721Upgradeable,
    ERC721EnumerableUpgradeable
    )
    returns (bool)
    {
        return super.supportsInterface(_interfaceId);
    }

    function _authorizeUpgrade(address newImplementation)
    internal
    override
    adminGuard
    {
        // Do something here.
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[45] private __gap;
}
