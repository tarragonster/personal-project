// SPDX-License-Identifier: MIT

pragma solidity ^0.8;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract Huuk721Premium is
    Initializable,
    ContextUpgradeable,
    AccessControlEnumerableUpgradeable,
    ERC721EnumerableUpgradeable,
    ERC721PausableUpgradeable,
    EIP712Upgradeable,
    UUPSUpgradeable
{
    using AddressUpgradeable for address;
    using StringsUpgradeable for uint256;
    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant VERIFIED_ROLE = keccak256("VERIFIED_ROLE");
    bytes32 public constant TOKEN_INFO_TYPE_HASH =
        keccak256(
            "TokenInfo(address owner,string uri,uint256 royaltyFee,uint256 nonce)"
        );

    CountersUpgradeable.Counter private _tokenIdTracker;
    address proxyRegistryAddress;
    string private _baseTokenURI;

    mapping(uint256 => string) private _tokenURIs;
    mapping(uint256 => address) public creators;
    mapping(uint256 => uint256) public RoyaltyFee;
    mapping(uint256 => bool) public executed;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function initialize(
        string memory name_,
        string memory symbol_,
        string memory version_,
        string memory baseTokenURI_
    ) public initializer {
        __init(name_, symbol_, version_, baseTokenURI_);
    }

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function __init(
        string memory name_,
        string memory symbol_,
        string memory version_,
        string memory baseTokenURI_
    ) internal onlyInitializing {
        __ERC721_init_unchained(name_, symbol_);
        __Pausable_init_unchained();
        __EIP712_init(name_, version_);
        __init_unchained(baseTokenURI_);
    }

    function __init_unchained(string memory _baseTokenURI_)
        internal
        onlyInitializing
    {
        _tokenIdTracker.increment();
        _baseTokenURI = _baseTokenURI_;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    modifier adminGuard() {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),
            "Huuk721Premium: must have admin role"
        );
        _;
    }

    modifier pauserGuard() {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "Huuk721Premium: must have pauser role"
        );
        _;
    }

    modifier verifiedUserGuard() {
        require(
            hasRole(VERIFIED_ROLE, _msgSender()),
            "Huuk721Premium: must have verified role"
        );
        _;
    }

    modifier verifiedUserLazyMint(address _owner) {
        require(
            hasRole(VERIFIED_ROLE, _owner),
            "Huuk721Premium: lazymint-owner must have verified role"
        );
        _;
    }

    function grantAdminRole(address _adminAddress) external adminGuard {
        _grantRole(DEFAULT_ADMIN_ROLE, _adminAddress);
        _grantRole(PAUSER_ROLE, _adminAddress);
    }

    function revokeAdminRole(address _adminAddress) external adminGuard {
        _revokeRole(DEFAULT_ADMIN_ROLE, _adminAddress);
        _revokeRole(PAUSER_ROLE, _adminAddress);
    }

    function grantVerifiedUser(address _verifiedUser) external adminGuard {
        _grantRole(VERIFIED_ROLE, _verifiedUser);
    }

    function revokeVerifiedUser(address _verifiedUser) public adminGuard {
        _revokeRole(VERIFIED_ROLE, _verifiedUser);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function getCurrentTokenId() public view returns (uint256) {
        return _tokenIdTracker.current();
    }

    function getCreator(uint256 _id) public view returns (address) {
        return creators[_id];
    }

    function getRoyaltyFee(uint256 _id) public view returns (uint256) {
        return RoyaltyFee[_id];
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 _tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(_tokenId),
            "Huuk721Premium: URI query for nonexistent token"
        );

        string memory baseURI = _baseURI();
        return
            bytes(baseURI).length > 0
                ? string(abi.encodePacked(baseURI, _tokenURIs[_tokenId]))
                : "";
    }

    function setBaseURI(string memory _uri) external adminGuard {
        _baseTokenURI = _uri;
    }

    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) private {
        require(
            _exists(_tokenId),
            "Huuk721Premium: URI set of nonexistent token"
        );
        _tokenURIs[_tokenId] = _tokenURI;
    }

    /**
     * Set proxyRegistryAddress
     */
    function setProxyAddress(address _proxyRegistryAddress)
        public
        adminGuard
        returns (bool)
    {
        proxyRegistryAddress = _proxyRegistryAddress;
        return true;
    }

    /**
     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.
     */
    function isApprovedForAll(address _owner, address _operator)
        public
        view
        override(ERC721Upgradeable, IERC721Upgradeable)
        returns (bool isOperator)
    {
        if (proxyRegistryAddress != address(0)) {
            if (proxyRegistryAddress == _operator) {
                return true;
            }
        }
        return ERC721Upgradeable.isApprovedForAll(_owner, _operator);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     * See {ERC721-_mint}.
     * Requirements:
     * - the caller must have the `MINTER_ROLE`.
     */
    function create(string calldata _tokenURI, uint256 _royaltyFee)
        external
        verifiedUserGuard
    {
        uint256 tokenId = _tokenIdTracker.current();
        _mint(_msgSender(), tokenId);
        creators[tokenId] = _msgSender();
        RoyaltyFee[tokenId] = _royaltyFee;
        _setTokenURI(tokenId, _tokenURI);
        _tokenIdTracker.increment();
    }

    function create(
        address _owner,
        string calldata _tokenURI,
        uint256 _royaltyFee,
        uint256 _nonce,
        bytes calldata _signature
    ) external verifiedUserLazyMint(_owner) returns (uint256 tokenId) {
        require(!executed[_nonce], "Huuk721Premium: duplicated nonce");
        executed[_nonce] = true;
        require(
            _recover(_owner, _tokenURI, _royaltyFee, _nonce, _signature) ==
                _owner,
            "Huuk721Premium: signer and owner mismatched"
        );
        tokenId = _tokenIdTracker.current();
        _mint(_owner, tokenId);
        creators[tokenId] = _owner;
        RoyaltyFee[tokenId] = _royaltyFee;
        _setTokenURI(tokenId, _tokenURI);
        _tokenIdTracker.increment();
        return tokenId;
    }

    function _recover(
        address _owner,
        string memory _uri,
        uint256 _royaltyFee,
        uint256 _nonce,
        bytes memory _signature
    ) internal view returns (address) {
        bytes32 ethTypedDataHash = _hashTypedDataV4(
            _getTokenInfoHash(_owner, _uri, _royaltyFee, _nonce)
        );
        address signer = ECDSAUpgradeable.recover(ethTypedDataHash, _signature);

        return signer;
    }

    function _getTokenInfoHash(
        address _owner,
        string memory _uri,
        uint256 _royaltyFee,
        uint256 _nonce
    ) internal pure returns (bytes32) {
        return
            keccak256(
                abi.encode(
                    TOKEN_INFO_TYPE_HASH,
                    _owner,
                    keccak256(bytes(_uri)),
                    _royaltyFee,
                    _nonce
                )
            );
    }

    function getChainID() external view returns (uint256) {
        uint256 id;
        assembly {
            id := chainid()
        }
        return id;
    }

    /**
     * @dev Pauses all token transfers.
     * See {ERC721Pausable} and {Pausable-_pause}.
     * Requirements:
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual pauserGuard {
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     * See {ERC721Pausable} and {Pausable-_unpause}.
     * Requirements:
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual pauserGuard {
        _unpause();
    }

    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _tokenId
    )
        internal
        virtual
        override(ERC721EnumerableUpgradeable, ERC721PausableUpgradeable)
    {
        super._beforeTokenTransfer(_from, _to, _tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 _interfaceId)
        public
        view
        virtual
        override(
            AccessControlEnumerableUpgradeable,
            ERC721Upgradeable,
            ERC721EnumerableUpgradeable
        )
        returns (bool)
    {
        return super.supportsInterface(_interfaceId);
    }

    function _authorizeUpgrade(address newImplementation)
        internal
        override
        adminGuard
    {
        // Do something here.
    }

    /**
     * @dev This empty reserved space is put in place to allow future versions to add new
     * variables without shifting down storage in the inheritance chain.
     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
     */
    uint256[45] private __gap;
}
